HloModule func_shard_parallel__2.68, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias) }

add {
  x = f32[] parameter(0)
  y = f32[] parameter(1)
  ROOT add = f32[] add(x, y)
}

add.1 {
  x.1 = f32[] parameter(0)
  y.1 = f32[] parameter(1)
  ROOT add.1 = f32[] add(x.1, y.1)
}

rng.362. {
  state.2 = u64[2]{0} parameter(1)
  slice.9 = u64[1]{0} slice(state.2), slice={[0:1]}
  reshape.10 = u64[] reshape(slice.9)
  convert.14 = u32[] convert(reshape.10)
  convert.25 = u64[] convert(convert.14)
  constant.13 = u64[] constant(32)
  shift-right-logical.15 = u64[] shift-right-logical(reshape.10, constant.13)
  convert.16 = u32[] convert(shift-right-logical.15)
  convert.23 = u64[] convert(convert.16)
  constant.22 = u64[] constant(32)
  shift-left.24 = u64[] shift-left(convert.23, constant.22)
  or.26 = u64[] or(convert.25, shift-left.24)
  constant.51 = u64[] constant(1024)
  add.52 = u64[] add(or.26, constant.51)
  reshape.59 = u64[1]{0} reshape(add.52)
  compare.57 = pred[] compare(add.52, or.26), direction=LT
  slice.11 = u64[1]{0} slice(state.2), slice={[1:2]}
  reshape.12 = u64[] reshape(slice.11)
  convert.18 = u32[] convert(reshape.12)
  convert.30 = u64[] convert(convert.18)
  constant.1 = u64[] constant(32)
  shift-right-logical.19 = u64[] shift-right-logical(reshape.12, constant.1)
  convert.20 = u32[] convert(shift-right-logical.19)
  convert.28 = u64[] convert(convert.20)
  constant.27 = u64[] constant(32)
  shift-left.29 = u64[] shift-left(convert.28, constant.27)
  or.31 = u64[] or(convert.30, shift-left.29)
  constant.53 = u64[] constant(1)
  add.55 = u64[] add(or.31, constant.53)
  broadcast.56 = u64[] broadcast(add.55), dimensions={}
  broadcast.54 = u64[] broadcast(or.31), dimensions={}
  select.58 = u64[] select(compare.57, broadcast.56, broadcast.54)
  reshape.60 = u64[1]{0} reshape(select.58)
  concatenate.61 = u64[2]{0} concatenate(reshape.59, reshape.60), dimensions={0}
  key.1 = u64[] parameter(0)
  convert.6 = u32[] convert(key.1)
  constant.86 = u32[] constant(2654435769)
  add.87 = u32[] add(convert.6, constant.86)
  constant.114 = u32[] constant(2654435769)
  add.115 = u32[] add(add.87, constant.114)
  constant.142 = u32[] constant(2654435769)
  add.143 = u32[] add(add.115, constant.142)
  constant.170 = u32[] constant(2654435769)
  add.171 = u32[] add(add.143, constant.170)
  constant.198 = u32[] constant(2654435769)
  add.199 = u32[] add(add.171, constant.198)
  constant.226 = u32[] constant(2654435769)
  add.227 = u32[] add(add.199, constant.226)
  constant.254 = u32[] constant(2654435769)
  add.255 = u32[] add(add.227, constant.254)
  constant.282 = u32[] constant(2654435769)
  add.283 = u32[] add(add.255, constant.282)
  constant.310 = u32[] constant(2654435769)
  add.311 = u32[] add(add.283, constant.310)
  constant.338 = u32[] constant(2654435769)
  add.339 = u32[] add(add.311, constant.338)
  constant.0 = u64[] constant(32)
  shift-right-logical.7 = u64[] shift-right-logical(key.1, constant.0)
  convert.8 = u32[] convert(shift-right-logical.7)
  constant.88 = u32[] constant(3144134277)
  add.89 = u32[] add(convert.8, constant.88)
  constant.116 = u32[] constant(3144134277)
  add.117 = u32[] add(add.89, constant.116)
  constant.144 = u32[] constant(3144134277)
  add.145 = u32[] add(add.117, constant.144)
  constant.172 = u32[] constant(3144134277)
  add.173 = u32[] add(add.145, constant.172)
  constant.200 = u32[] constant(3144134277)
  add.201 = u32[] add(add.173, constant.200)
  constant.228 = u32[] constant(3144134277)
  add.229 = u32[] add(add.201, constant.228)
  constant.256 = u32[] constant(3144134277)
  add.257 = u32[] add(add.229, constant.256)
  constant.284 = u32[] constant(3144134277)
  add.285 = u32[] add(add.257, constant.284)
  constant.312 = u32[] constant(3144134277)
  add.313 = u32[] add(add.285, constant.312)
  constant.340 = u32[] constant(3144134277)
  add.341 = u32[] add(add.313, constant.340)
  broadcast.32 = u64[1024]{0} broadcast(or.26), dimensions={}
  iota.21 = u64[1024]{0} iota(), iota_dimension=0
  add.33 = u64[1024]{0} add(broadcast.32, iota.21)
  convert.42 = u32[1024]{0} convert(add.33)
  convert.63 = u64[1024]{0} convert(convert.42)
  constant.62 = u64[] constant(3528531795)
  broadcast.64 = u64[1024]{0} broadcast(constant.62), dimensions={}
  multiply.65 = u64[1024]{0} multiply(convert.63, broadcast.64)
  constant.67 = u64[] constant(32)
  broadcast.68 = u64[1024]{0} broadcast(constant.67), dimensions={}
  shift-right-logical.69 = u64[1024]{0} shift-right-logical(multiply.65, broadcast.68)
  convert.70 = u32[1024]{0} convert(shift-right-logical.69)
  broadcast.38 = u64[1024]{0} broadcast(or.26), dimensions={}
  compare.39 = pred[1024]{0} compare(add.33, broadcast.38), direction=LT
  constant.34 = u64[] constant(1)
  add.36 = u64[] add(or.31, constant.34)
  broadcast.37 = u64[1024]{0} broadcast(add.36), dimensions={}
  broadcast.35 = u64[1024]{0} broadcast(or.31), dimensions={}
  select.40 = u64[1024]{0} select(compare.39, broadcast.37, broadcast.35)
  constant.46 = u64[] constant(32)
  broadcast.48 = u64[1024]{0} broadcast(constant.46), dimensions={}
  shift-right-logical.49 = u64[1024]{0} shift-right-logical(select.40, broadcast.48)
  convert.50 = u32[1024]{0} convert(shift-right-logical.49)
  xor.83 = u32[1024]{0} xor(convert.70, convert.50)
  broadcast.84 = u32[1024]{0} broadcast(convert.8), dimensions={}
  xor.85 = u32[1024]{0} xor(xor.83, broadcast.84)
  convert.100 = u64[1024]{0} convert(xor.85)
  constant.99 = u64[] constant(3449720151)
  broadcast.101 = u64[1024]{0} broadcast(constant.99), dimensions={}
  multiply.102 = u64[1024]{0} multiply(convert.100, broadcast.101)
  constant.104 = u64[] constant(32)
  broadcast.105 = u64[1024]{0} broadcast(constant.104), dimensions={}
  shift-right-logical.106 = u64[1024]{0} shift-right-logical(multiply.102, broadcast.105)
  convert.107 = u32[1024]{0} convert(shift-right-logical.106)
  convert.47 = u32[1024]{0} convert(select.40)
  convert.72 = u64[1024]{0} convert(convert.47)
  constant.71 = u64[] constant(3449720151)
  broadcast.73 = u64[1024]{0} broadcast(constant.71), dimensions={}
  multiply.74 = u64[1024]{0} multiply(convert.72, broadcast.73)
  convert.75 = u32[1024]{0} convert(multiply.74)
  xor.108 = u32[1024]{0} xor(convert.107, convert.75)
  broadcast.109 = u32[1024]{0} broadcast(add.87), dimensions={}
  xor.110 = u32[1024]{0} xor(xor.108, broadcast.109)
  convert.119 = u64[1024]{0} convert(xor.110)
  constant.118 = u64[] constant(3528531795)
  broadcast.120 = u64[1024]{0} broadcast(constant.118), dimensions={}
  multiply.121 = u64[1024]{0} multiply(convert.119, broadcast.120)
  constant.123 = u64[] constant(32)
  broadcast.124 = u64[1024]{0} broadcast(constant.123), dimensions={}
  shift-right-logical.125 = u64[1024]{0} shift-right-logical(multiply.121, broadcast.124)
  convert.126 = u32[1024]{0} convert(shift-right-logical.125)
  constant.76 = u64[] constant(32)
  broadcast.77 = u64[1024]{0} broadcast(constant.76), dimensions={}
  shift-right-logical.78 = u64[1024]{0} shift-right-logical(multiply.74, broadcast.77)
  convert.79 = u32[1024]{0} convert(shift-right-logical.78)
  constant.41 = u64[] constant(32)
  broadcast.43 = u64[1024]{0} broadcast(constant.41), dimensions={}
  shift-right-logical.44 = u64[1024]{0} shift-right-logical(add.33, broadcast.43)
  convert.45 = u32[1024]{0} convert(shift-right-logical.44)
  xor.80 = u32[1024]{0} xor(convert.79, convert.45)
  broadcast.81 = u32[1024]{0} broadcast(convert.6), dimensions={}
  xor.82 = u32[1024]{0} xor(xor.80, broadcast.81)
  convert.91 = u64[1024]{0} convert(xor.82)
  constant.90 = u64[] constant(3528531795)
  broadcast.92 = u64[1024]{0} broadcast(constant.90), dimensions={}
  multiply.93 = u64[1024]{0} multiply(convert.91, broadcast.92)
  convert.94 = u32[1024]{0} convert(multiply.93)
  xor.139 = u32[1024]{0} xor(convert.126, convert.94)
  broadcast.140 = u32[1024]{0} broadcast(add.117), dimensions={}
  xor.141 = u32[1024]{0} xor(xor.139, broadcast.140)
  convert.156 = u64[1024]{0} convert(xor.141)
  constant.155 = u64[] constant(3449720151)
  broadcast.157 = u64[1024]{0} broadcast(constant.155), dimensions={}
  multiply.158 = u64[1024]{0} multiply(convert.156, broadcast.157)
  constant.160 = u64[] constant(32)
  broadcast.161 = u64[1024]{0} broadcast(constant.160), dimensions={}
  shift-right-logical.162 = u64[1024]{0} shift-right-logical(multiply.158, broadcast.161)
  convert.163 = u32[1024]{0} convert(shift-right-logical.162)
  constant.95 = u64[] constant(32)
  broadcast.96 = u64[1024]{0} broadcast(constant.95), dimensions={}
  shift-right-logical.97 = u64[1024]{0} shift-right-logical(multiply.93, broadcast.96)
  convert.98 = u32[1024]{0} convert(shift-right-logical.97)
  convert.66 = u32[1024]{0} convert(multiply.65)
  xor.111 = u32[1024]{0} xor(convert.98, convert.66)
  broadcast.112 = u32[1024]{0} broadcast(add.89), dimensions={}
  xor.113 = u32[1024]{0} xor(xor.111, broadcast.112)
  convert.128 = u64[1024]{0} convert(xor.113)
  constant.127 = u64[] constant(3449720151)
  broadcast.129 = u64[1024]{0} broadcast(constant.127), dimensions={}
  multiply.130 = u64[1024]{0} multiply(convert.128, broadcast.129)
  convert.131 = u32[1024]{0} convert(multiply.130)
  xor.164 = u32[1024]{0} xor(convert.163, convert.131)
  broadcast.165 = u32[1024]{0} broadcast(add.143), dimensions={}
  xor.166 = u32[1024]{0} xor(xor.164, broadcast.165)
  convert.175 = u64[1024]{0} convert(xor.166)
  constant.174 = u64[] constant(3528531795)
  broadcast.176 = u64[1024]{0} broadcast(constant.174), dimensions={}
  multiply.177 = u64[1024]{0} multiply(convert.175, broadcast.176)
  constant.179 = u64[] constant(32)
  broadcast.180 = u64[1024]{0} broadcast(constant.179), dimensions={}
  shift-right-logical.181 = u64[1024]{0} shift-right-logical(multiply.177, broadcast.180)
  convert.182 = u32[1024]{0} convert(shift-right-logical.181)
  constant.132 = u64[] constant(32)
  broadcast.133 = u64[1024]{0} broadcast(constant.132), dimensions={}
  shift-right-logical.134 = u64[1024]{0} shift-right-logical(multiply.130, broadcast.133)
  convert.135 = u32[1024]{0} convert(shift-right-logical.134)
  convert.103 = u32[1024]{0} convert(multiply.102)
  xor.136 = u32[1024]{0} xor(convert.135, convert.103)
  broadcast.137 = u32[1024]{0} broadcast(add.115), dimensions={}
  xor.138 = u32[1024]{0} xor(xor.136, broadcast.137)
  convert.147 = u64[1024]{0} convert(xor.138)
  constant.146 = u64[] constant(3528531795)
  broadcast.148 = u64[1024]{0} broadcast(constant.146), dimensions={}
  multiply.149 = u64[1024]{0} multiply(convert.147, broadcast.148)
  convert.150 = u32[1024]{0} convert(multiply.149)
  xor.195 = u32[1024]{0} xor(convert.182, convert.150)
  broadcast.196 = u32[1024]{0} broadcast(add.173), dimensions={}
  xor.197 = u32[1024]{0} xor(xor.195, broadcast.196)
  convert.212 = u64[1024]{0} convert(xor.197)
  constant.211 = u64[] constant(3449720151)
  broadcast.213 = u64[1024]{0} broadcast(constant.211), dimensions={}
  multiply.214 = u64[1024]{0} multiply(convert.212, broadcast.213)
  constant.216 = u64[] constant(32)
  broadcast.217 = u64[1024]{0} broadcast(constant.216), dimensions={}
  shift-right-logical.218 = u64[1024]{0} shift-right-logical(multiply.214, broadcast.217)
  convert.219 = u32[1024]{0} convert(shift-right-logical.218)
  constant.151 = u64[] constant(32)
  broadcast.152 = u64[1024]{0} broadcast(constant.151), dimensions={}
  shift-right-logical.153 = u64[1024]{0} shift-right-logical(multiply.149, broadcast.152)
  convert.154 = u32[1024]{0} convert(shift-right-logical.153)
  convert.122 = u32[1024]{0} convert(multiply.121)
  xor.167 = u32[1024]{0} xor(convert.154, convert.122)
  broadcast.168 = u32[1024]{0} broadcast(add.145), dimensions={}
  xor.169 = u32[1024]{0} xor(xor.167, broadcast.168)
  convert.184 = u64[1024]{0} convert(xor.169)
  constant.183 = u64[] constant(3449720151)
  broadcast.185 = u64[1024]{0} broadcast(constant.183), dimensions={}
  multiply.186 = u64[1024]{0} multiply(convert.184, broadcast.185)
  convert.187 = u32[1024]{0} convert(multiply.186)
  xor.220 = u32[1024]{0} xor(convert.219, convert.187)
  broadcast.221 = u32[1024]{0} broadcast(add.199), dimensions={}
  xor.222 = u32[1024]{0} xor(xor.220, broadcast.221)
  convert.231 = u64[1024]{0} convert(xor.222)
  constant.230 = u64[] constant(3528531795)
  broadcast.232 = u64[1024]{0} broadcast(constant.230), dimensions={}
  multiply.233 = u64[1024]{0} multiply(convert.231, broadcast.232)
  constant.235 = u64[] constant(32)
  broadcast.236 = u64[1024]{0} broadcast(constant.235), dimensions={}
  shift-right-logical.237 = u64[1024]{0} shift-right-logical(multiply.233, broadcast.236)
  convert.238 = u32[1024]{0} convert(shift-right-logical.237)
  constant.188 = u64[] constant(32)
  broadcast.189 = u64[1024]{0} broadcast(constant.188), dimensions={}
  shift-right-logical.190 = u64[1024]{0} shift-right-logical(multiply.186, broadcast.189)
  convert.191 = u32[1024]{0} convert(shift-right-logical.190)
  convert.159 = u32[1024]{0} convert(multiply.158)
  xor.192 = u32[1024]{0} xor(convert.191, convert.159)
  broadcast.193 = u32[1024]{0} broadcast(add.171), dimensions={}
  xor.194 = u32[1024]{0} xor(xor.192, broadcast.193)
  convert.203 = u64[1024]{0} convert(xor.194)
  constant.202 = u64[] constant(3528531795)
  broadcast.204 = u64[1024]{0} broadcast(constant.202), dimensions={}
  multiply.205 = u64[1024]{0} multiply(convert.203, broadcast.204)
  convert.206 = u32[1024]{0} convert(multiply.205)
  xor.251 = u32[1024]{0} xor(convert.238, convert.206)
  broadcast.252 = u32[1024]{0} broadcast(add.229), dimensions={}
  xor.253 = u32[1024]{0} xor(xor.251, broadcast.252)
  convert.268 = u64[1024]{0} convert(xor.253)
  constant.267 = u64[] constant(3449720151)
  broadcast.269 = u64[1024]{0} broadcast(constant.267), dimensions={}
  multiply.270 = u64[1024]{0} multiply(convert.268, broadcast.269)
  constant.272 = u64[] constant(32)
  broadcast.273 = u64[1024]{0} broadcast(constant.272), dimensions={}
  shift-right-logical.274 = u64[1024]{0} shift-right-logical(multiply.270, broadcast.273)
  convert.275 = u32[1024]{0} convert(shift-right-logical.274)
  constant.207 = u64[] constant(32)
  broadcast.208 = u64[1024]{0} broadcast(constant.207), dimensions={}
  shift-right-logical.209 = u64[1024]{0} shift-right-logical(multiply.205, broadcast.208)
  convert.210 = u32[1024]{0} convert(shift-right-logical.209)
  convert.178 = u32[1024]{0} convert(multiply.177)
  xor.223 = u32[1024]{0} xor(convert.210, convert.178)
  broadcast.224 = u32[1024]{0} broadcast(add.201), dimensions={}
  xor.225 = u32[1024]{0} xor(xor.223, broadcast.224)
  convert.240 = u64[1024]{0} convert(xor.225)
  constant.239 = u64[] constant(3449720151)
  broadcast.241 = u64[1024]{0} broadcast(constant.239), dimensions={}
  multiply.242 = u64[1024]{0} multiply(convert.240, broadcast.241)
  convert.243 = u32[1024]{0} convert(multiply.242)
  xor.276 = u32[1024]{0} xor(convert.275, convert.243)
  broadcast.277 = u32[1024]{0} broadcast(add.255), dimensions={}
  xor.278 = u32[1024]{0} xor(xor.276, broadcast.277)
  convert.287 = u64[1024]{0} convert(xor.278)
  constant.286 = u64[] constant(3528531795)
  broadcast.288 = u64[1024]{0} broadcast(constant.286), dimensions={}
  multiply.289 = u64[1024]{0} multiply(convert.287, broadcast.288)
  constant.291 = u64[] constant(32)
  broadcast.292 = u64[1024]{0} broadcast(constant.291), dimensions={}
  shift-right-logical.293 = u64[1024]{0} shift-right-logical(multiply.289, broadcast.292)
  convert.294 = u32[1024]{0} convert(shift-right-logical.293)
  constant.244 = u64[] constant(32)
  broadcast.245 = u64[1024]{0} broadcast(constant.244), dimensions={}
  shift-right-logical.246 = u64[1024]{0} shift-right-logical(multiply.242, broadcast.245)
  convert.247 = u32[1024]{0} convert(shift-right-logical.246)
  convert.215 = u32[1024]{0} convert(multiply.214)
  xor.248 = u32[1024]{0} xor(convert.247, convert.215)
  broadcast.249 = u32[1024]{0} broadcast(add.227), dimensions={}
  xor.250 = u32[1024]{0} xor(xor.248, broadcast.249)
  convert.259 = u64[1024]{0} convert(xor.250)
  constant.258 = u64[] constant(3528531795)
  broadcast.260 = u64[1024]{0} broadcast(constant.258), dimensions={}
  multiply.261 = u64[1024]{0} multiply(convert.259, broadcast.260)
  convert.262 = u32[1024]{0} convert(multiply.261)
  xor.307 = u32[1024]{0} xor(convert.294, convert.262)
  broadcast.308 = u32[1024]{0} broadcast(add.285), dimensions={}
  xor.309 = u32[1024]{0} xor(xor.307, broadcast.308)
  convert.324 = u64[1024]{0} convert(xor.309)
  constant.323 = u64[] constant(3449720151)
  broadcast.325 = u64[1024]{0} broadcast(constant.323), dimensions={}
  multiply.326 = u64[1024]{0} multiply(convert.324, broadcast.325)
  constant.328 = u64[] constant(32)
  broadcast.329 = u64[1024]{0} broadcast(constant.328), dimensions={}
  shift-right-logical.330 = u64[1024]{0} shift-right-logical(multiply.326, broadcast.329)
  convert.331 = u32[1024]{0} convert(shift-right-logical.330)
  constant.263 = u64[] constant(32)
  broadcast.264 = u64[1024]{0} broadcast(constant.263), dimensions={}
  shift-right-logical.265 = u64[1024]{0} shift-right-logical(multiply.261, broadcast.264)
  convert.266 = u32[1024]{0} convert(shift-right-logical.265)
  convert.234 = u32[1024]{0} convert(multiply.233)
  xor.279 = u32[1024]{0} xor(convert.266, convert.234)
  broadcast.280 = u32[1024]{0} broadcast(add.257), dimensions={}
  xor.281 = u32[1024]{0} xor(xor.279, broadcast.280)
  convert.296 = u64[1024]{0} convert(xor.281)
  constant.295 = u64[] constant(3449720151)
  broadcast.297 = u64[1024]{0} broadcast(constant.295), dimensions={}
  multiply.298 = u64[1024]{0} multiply(convert.296, broadcast.297)
  convert.299 = u32[1024]{0} convert(multiply.298)
  xor.332 = u32[1024]{0} xor(convert.331, convert.299)
  broadcast.333 = u32[1024]{0} broadcast(add.311), dimensions={}
  xor.334 = u32[1024]{0} xor(xor.332, broadcast.333)
  reshape.342 = u32[1024,1]{1,0} reshape(xor.334)
  convert.327 = u32[1024]{0} convert(multiply.326)
  reshape.343 = u32[1024,1]{1,0} reshape(convert.327)
  constant.300 = u64[] constant(32)
  broadcast.301 = u64[1024]{0} broadcast(constant.300), dimensions={}
  shift-right-logical.302 = u64[1024]{0} shift-right-logical(multiply.298, broadcast.301)
  convert.303 = u32[1024]{0} convert(shift-right-logical.302)
  convert.271 = u32[1024]{0} convert(multiply.270)
  xor.304 = u32[1024]{0} xor(convert.303, convert.271)
  broadcast.305 = u32[1024]{0} broadcast(add.283), dimensions={}
  xor.306 = u32[1024]{0} xor(xor.304, broadcast.305)
  convert.315 = u64[1024]{0} convert(xor.306)
  constant.314 = u64[] constant(3528531795)
  broadcast.316 = u64[1024]{0} broadcast(constant.314), dimensions={}
  multiply.317 = u64[1024]{0} multiply(convert.315, broadcast.316)
  constant.319 = u64[] constant(32)
  broadcast.320 = u64[1024]{0} broadcast(constant.319), dimensions={}
  shift-right-logical.321 = u64[1024]{0} shift-right-logical(multiply.317, broadcast.320)
  convert.322 = u32[1024]{0} convert(shift-right-logical.321)
  convert.290 = u32[1024]{0} convert(multiply.289)
  xor.335 = u32[1024]{0} xor(convert.322, convert.290)
  broadcast.336 = u32[1024]{0} broadcast(add.313), dimensions={}
  xor.337 = u32[1024]{0} xor(xor.335, broadcast.336)
  reshape.344 = u32[1024,1]{1,0} reshape(xor.337)
  convert.318 = u32[1024]{0} convert(multiply.317)
  reshape.345 = u32[1024,1]{1,0} reshape(convert.318)
  concatenate.346 = u32[1024,4]{1,0} concatenate(reshape.342, reshape.343, reshape.344, reshape.345), dimensions={1}
  reshape.347 = u32[4096]{0} reshape(concatenate.346)
  slice.348 = u32[4096]{0} slice(reshape.347), slice={[0:4096]}
  reshape.349 = u32[8,32,16]{2,1,0} reshape(slice.348)
  constant.350 = u32[] constant(9)
  broadcast.351 = u32[8,32,16]{2,1,0} broadcast(constant.350), dimensions={}
  shift-right-logical.352 = u32[8,32,16]{2,1,0} shift-right-logical(reshape.349, broadcast.351)
  convert.353 = f32[8,32,16]{2,1,0} convert(shift-right-logical.352)
  constant.354 = f32[] constant(1.1920929e-07)
  broadcast.355 = f32[8,32,16]{2,1,0} broadcast(constant.354), dimensions={}
  multiply.356 = f32[8,32,16]{2,1,0} multiply(convert.353, broadcast.355)
  b_or_sigma.4 = f32[] parameter(3)
  a_or_mean.3 = f32[] parameter(2)
  subtract.357 = f32[] subtract(b_or_sigma.4, a_or_mean.3)
  broadcast.358 = f32[8,32,16]{2,1,0} broadcast(subtract.357), dimensions={}
  multiply.359 = f32[8,32,16]{2,1,0} multiply(multiply.356, broadcast.358)
  broadcast.360 = f32[8,32,16]{2,1,0} broadcast(a_or_mean.3), dimensions={}
  ROOT add.361 = f32[8,32,16]{2,1,0} add(multiply.359, broadcast.360)
}

ENTRY func_shard_parallel__2.68_spmd {
  param = u32[2]{0} parameter(5), sharding={replicated}
  param.1 = s32[] parameter(0), sharding={replicated}
  constant.5 = s32[] constant(1), metadata={op_type="add" op_name="parallelize(func_shard_parallel)/add" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/base.py" source_line=99}
  add.2 = s32[] add(param.1, constant.5), metadata={op_type="add" op_name="parallelize(func_shard_parallel)/add" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/base.py" source_line=99}
  param.2 = f32[16,16]{1,0} parameter(1), sharding={replicated}
  param.3 = f32[8,32,16]{2,1,0} parameter(3), sharding={devices=[4,1,1]0,1,2,3}
  reshape.16 = f32[256,16]{1,0} reshape(param.3)
  constant.2 = u64[] constant(13930160852258120444)
  rng-get-and-update-state = u64[2]{0} rng-get-and-update-state(), delta=4096
  constant.6 = f32[] constant(0), metadata={op_type="rng_uniform" op_name="parallelize(func_shard_parallel)/rng_uniform[shape=(32, 32, 16)]" source_file="/home/ubuntu/apjax/alpa/alpa/monkey_patch.py" source_line=61}
  constant.8 = f32[] constant(1), metadata={op_type="rng_uniform" op_name="parallelize(func_shard_parallel)/rng_uniform[shape=(32, 32, 16)]" source_file="/home/ubuntu/apjax/alpa/alpa/monkey_patch.py" source_line=61}
  call = f32[8,32,16] call(constant.2, rng-get-and-update-state, constant.6, constant.8), to_apply=rng.362.
  constant.11 = f32[] constant(0.9), metadata={op_type="lt" op_name="parallelize(func_shard_parallel)/lt" source_file="/home/ubuntu/apjax/alpa/alpa/monkey_patch.py" source_line=122}
  broadcast.11 = f32[8,32,16]{2,1,0} broadcast(constant.11), dimensions={}
  compare.0 = pred[8,32,16]{2,1,0} compare(call, broadcast.11), direction=LT, metadata={op_type="lt" op_name="parallelize(func_shard_parallel)/lt" source_file="/home/ubuntu/apjax/alpa/alpa/monkey_patch.py" source_line=122}
  constant.17 = pred[] constant(true), metadata={op_type="eq" op_name="parallelize(func_shard_parallel)/eq" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  broadcast.12 = pred[8,32,16]{2,1,0} broadcast(constant.17), dimensions={}
  compare.1 = pred[8,32,16]{2,1,0} compare(compare.0, broadcast.12), direction=EQ, metadata={op_type="eq" op_name="parallelize(func_shard_parallel)/eq" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  dot.9 = f32[256,16]{1,0} dot(reshape.16, param.2), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.23 = f32[] constant(1.11111116), metadata={op_type="div" op_name="parallelize(func_shard_parallel)/div" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  broadcast.14 = f32[256,16]{1,0} broadcast(constant.23), dimensions={}
  multiply.6 = f32[256,16]{1,0} multiply(dot.9, broadcast.14), metadata={op_type="div" op_name="parallelize(func_shard_parallel)/div" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  reshape.20 = f32[8,32,16]{2,1,0} reshape(multiply.6), metadata={op_type="div" op_name="parallelize(func_shard_parallel)/div" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  broadcast.15 = f32[8,32,16]{2,1,0} broadcast(constant.6), dimensions={}
  select.0 = f32[8,32,16]{2,1,0} select(compare.0, reshape.20, broadcast.15), metadata={op_type="select_n" op_name="parallelize(func_shard_parallel)/select_n" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  reshape.22 = f32[256,16]{1,0} reshape(select.0)
  param.4 = f32[16,16]{1,0} parameter(2), sharding={replicated}
  dot.10 = f32[256,16]{1,0} dot(reshape.22, param.4), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  reshape.23 = f32[8,32,16]{2,1,0} reshape(dot.10), metadata={op_type="dot_general" op_name="parallelize(func_shard_parallel)/dot_general[dimension_numbers=(((2,), (0,)), ((), ())) precision=None preferred_element_type=None]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  param.5 = f32[8,32,16]{2,1,0} parameter(4), sharding={devices=[4,1,1]0,1,2,3}
  subtract.0 = f32[8,32,16]{2,1,0} subtract(reshape.23, param.5), metadata={op_type="sub" op_name="parallelize(func_shard_parallel)/sub" source_file="test_auto_sharding_basic.py" source_line=103}
  constant.31 = f32[] constant(0.000122070312), metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="test_auto_sharding_basic.py" source_line=103}
  broadcast.17 = f32[8,32,16]{2,1,0} broadcast(constant.31), dimensions={}
  multiply.7 = f32[8,32,16]{2,1,0} multiply(subtract.0, broadcast.17), metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="test_auto_sharding_basic.py" source_line=103}
  reshape.25 = f32[256,16]{1,0} reshape(multiply.7)
  dot.11 = f32[256,16]{1,0} dot(reshape.25, param.4), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  reshape.26 = f32[8,32,16]{2,1,0} reshape(dot.11), metadata={op_type="dot_general" op_name="parallelize(func_shard_parallel)/dot_general[dimension_numbers=(((2,), (1,)), ((), ())) precision=None preferred_element_type=None]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  select.1 = f32[8,32,16]{2,1,0} select(compare.1, reshape.26, broadcast.15), metadata={op_type="select_n" op_name="parallelize(func_shard_parallel)/select_n" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  broadcast.18 = f32[8,32,16]{2,1,0} broadcast(constant.23), dimensions={}
  multiply.8 = f32[8,32,16]{2,1,0} multiply(select.1, broadcast.18), metadata={op_type="div" op_name="parallelize(func_shard_parallel)/div" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/stochastic.py" source_line=68}
  transpose.10 = f32[16,8,32]{0,2,1} transpose(multiply.8), dimensions={2,0,1}
  reshape.28 = f32[16,256]{1,0} reshape(transpose.10)
  dot.12 = f32[16,16]{1,0} dot(reshape.16, reshape.28), lhs_contracting_dims={0}, rhs_contracting_dims={1}, metadata={op_type="transpose" op_name="parallelize(func_shard_parallel)/transpose[permutation=(1, 0)]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  all-reduce = f32[16,16]{1,0} all-reduce(dot.12), channel_id=1, replica_groups={{0}}, to_apply=add, metadata={op_type="transpose" op_name="parallelize(func_shard_parallel)/transpose[permutation=(1, 0)]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  constant.44 = f32[] constant(0.01), metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  broadcast.10 = f32[16,16]{1,0} broadcast(constant.44), dimensions={}, metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  multiply.9 = f32[16,16]{1,0} multiply(all-reduce, broadcast.10), metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  subtract.1 = f32[16,16]{1,0} subtract(param.2, multiply.9), metadata={op_type="sub" op_name="parallelize(func_shard_parallel)/sub" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  transpose.11 = f32[16,8,32]{0,2,1} transpose(multiply.7), dimensions={2,0,1}
  reshape.29 = f32[16,256]{1,0} reshape(transpose.11)
  dot.13 = f32[16,16]{1,0} dot(reshape.22, reshape.29), lhs_contracting_dims={0}, rhs_contracting_dims={1}, metadata={op_type="transpose" op_name="parallelize(func_shard_parallel)/transpose[permutation=(1, 0)]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  all-reduce.1 = f32[16,16]{1,0} all-reduce(dot.13), channel_id=2, replica_groups={{0}}, to_apply=add.1, metadata={op_type="transpose" op_name="parallelize(func_shard_parallel)/transpose[permutation=(1, 0)]" source_file="/usr/local/lib/python3.7/dist-packages/flax/linen/linear.py" source_line=190}
  multiply.10 = f32[16,16]{1,0} multiply(all-reduce.1, broadcast.10), metadata={op_type="mul" op_name="parallelize(func_shard_parallel)/mul" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  subtract.2 = f32[16,16]{1,0} subtract(param.4, multiply.10), metadata={op_type="sub" op_name="parallelize(func_shard_parallel)/sub" source_file="/usr/local/lib/python3.7/dist-packages/flax/optim/sgd.py" source_line=45}
  ROOT tuple = (s32[], f32[16,16]{1,0}, f32[16,16]{1,0}) tuple(add.2, subtract.1, subtract.2)
}

