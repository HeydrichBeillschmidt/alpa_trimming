BufferAssignment:
allocation 0: 0x398ebe0, size 1024, maybe-live-out:
 value: <2 add.0 @0> (size=1024,offset=0): f32[8,32]{1,0}
allocation 1: 0x398ec90, size 1024, parameter 0, shape |f32[8,32]| at ShapeIndex {}:
 value: <0 param @0> (size=1024,offset=0): f32[8,32]{1,0}
allocation 2: 0x398ed40, size 1024, parameter 1, shape |f32[8,32]| at ShapeIndex {}:
 value: <1 param.1 @0> (size=1024,offset=0): f32[8,32]{1,0}
allocation 3: 0x398edf0, size 8, output shape is |(f32[8,32])|, maybe-live-out:
 value: <3 tuple{} @0> (size=8,offset=0): (f32[8,32]{1,0})

Total bytes used: 3080 (3.0KiB)

Used values:
<0 param @0>
 positions:
  param
 uses:
  add.0, operand 0
 from instruction:%param = f32[8,32]{1,0} parameter(0), sharding={devices=[4,1]0,1,2,3}
<1 param.1 @0>
 positions:
  param.1
 uses:
  add.0, operand 1
 from instruction:%param.1 = f32[8,32]{1,0} parameter(1), sharding={devices=[4,1]0,1,2,3}
<2 add.0 @0>
 positions:
  add.0
  tuple {0}
 uses:
  tuple, operand 0
 from instruction:%add.0 = f32[8,32]{1,0} add(f32[8,32]{1,0} %param, f32[8,32]{1,0} %param.1), metadata={op_type="add" op_name="parallelize(add_one_shard_parallel)/add" source_file="test_auto_sharding_basic.py" source_line=213}
<3 tuple{} @0>
 positions:
  tuple {}
 uses:
 from instruction:%tuple = (f32[8,32]{1,0}) tuple(f32[8,32]{1,0} %add.0)


HloLiveRange (max 4):
  InstructionSequence:
    0:param.1
    1:param
    2:add.0
    3:tuple
  BufferLiveRange:
    param{}:0-4
    param.1{}:0-4
    add.0{}:2-4
    tuple{}:3-4
  Live ranges at 3 (peak):
    param: 1024 bytes
    param.1: 1024 bytes
    add.0: 1024 bytes
    tuple: 8 bytes
