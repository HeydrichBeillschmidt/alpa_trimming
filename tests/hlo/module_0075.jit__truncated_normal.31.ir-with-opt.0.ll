; ModuleID = '<string>'
source_filename = "<string>"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_185 = external local_unnamed_addr addrspace(1) constant [8 x i8], align 128

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
define void @fusion(i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc0, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc1, i8* noalias nocapture writeonly align 128 dereferenceable(1024) %alloc2, i8* noalias nocapture readonly align 128 dereferenceable(16) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf150 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2148 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %alloc1146 = addrspacecast i8* %alloc1 to i8 addrspace(1)*
  %alloc0144 = addrspacecast i8* %alloc0 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !6
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = bitcast i8 addrspace(1)* %alloc1146 to i32 addrspace(1)*
  %2 = bitcast i8 addrspace(1)* %alloc0144 to i32 addrspace(1)*
  %3 = load i32, i32 addrspace(1)* %1, align 16, !invariant.load !7
  %4 = sitofp i32 %3 to float
  %5 = bitcast float %4 to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp eq i32 %6, 0
  %8 = icmp ugt i32 %6, 2139095040
  %.not7 = icmp sgt i32 %3, -1
  %9 = or i1 %.not7, %8
  %10 = select i1 %9, i32 -1, i32 1
  %11 = add i32 %10, %5
  %12 = select i1 %7, i32 -2147483647, i32 %11
  %13 = bitcast i32 %12 to float
  %14 = load i32, i32 addrspace(1)* %2, align 16, !invariant.load !7
  %15 = sitofp i32 %14 to float
  %16 = bitcast float %15 to i32
  %17 = and i32 %16, 2147483647
  %18 = icmp eq i32 %17, 0
  %19 = icmp ugt i32 %17, 2139095040
  %20 = icmp slt i32 %14, 0
  %21 = or i1 %20, %19
  %22 = select i1 %21, i32 -1, i32 1
  %23 = add i32 %22, %16
  %24 = select i1 %18, i32 1, i32 %23
  %25 = bitcast i32 %24 to float
  %26 = bitcast i8 addrspace(1)* %temp_buf150 to i64 addrspace(1)*
  %27 = bitcast i64 addrspace(1)* %26 to <2 x i64> addrspace(1)*
  %28 = load <2 x i64>, <2 x i64> addrspace(1)* %27, align 128, !invariant.load !7
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = extractelement <2 x i64> %28, i32 1
  %31 = and i64 %29, 4294967295
  %32 = load i64, i64 addrspace(1)* bitcast ([8 x i8] addrspace(1)* @buffer_for_constant_185 to i64 addrspace(1)*), align 128, !invariant.load !7
  %33 = lshr i64 %29, %32
  %shft.chk = icmp ult i64 %32, 64
  %34 = and i64 %33, 4294967295
  %35 = shl i64 %34, %32
  %36 = select i1 %shft.chk, i64 %35, i64 0
  %37 = or i64 %36, %31
  %38 = zext i32 %0 to i64
  %39 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %37, i64 %38)
  %math = extractvalue { i64, i1 } %39, 0
  %ov = extractvalue { i64, i1 } %39, 1
  %40 = and i64 %math, 4294967295
  %41 = mul nuw i64 %40, 3528531795
  %42 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf150, i64 8
  %43 = and i64 %30, 4294967295
  %44 = lshr i64 %30, %32
  %45 = and i64 %44, 4294967295
  %46 = shl i64 %45, %32
  %47 = select i1 %shft.chk, i64 %46, i64 0
  %48 = or i64 %47, %43
  %49 = zext i1 %ov to i64
  %50 = add i64 %48, %49
  %51 = xor i64 %50, %41
  %52 = lshr i64 %51, %32
  %.op100 = and i64 %52, 4294967295
  %53 = xor i64 %.op100, 3243368317
  %.op101 = mul nuw i64 %53, 3449720151
  %54 = lshr i64 %.op101, %32
  %55 = select i1 %shft.chk, i64 %54, i64 0
  %56 = and i64 %50, 4294967295
  %57 = mul nuw i64 %56, 3449720151
  %58 = xor i64 %55, %57
  %59 = and i64 %58, 4294967295
  %60 = xor i64 %59, 220028085
  %61 = mul nuw i64 %60, 3528531795
  %62 = lshr i64 %61, %32
  %63 = xor i64 %57, %math
  %64 = lshr i64 %63, %32
  %.op102 = and i64 %64, 4294967295
  %65 = xor i64 %.op102, 1860559612
  %.op103 = mul nuw i64 %65, 3528531795
  %66 = xor i64 %62, %.op103
  %.op = and i64 %66, 4294967295
  %.op.op = xor i64 %.op, 941702279
  %.op.op.op = mul nuw i64 %.op.op, 3449720151
  %67 = lshr i64 %.op.op.op, %32
  %68 = select i1 %shft.chk, i64 %67, i64 0
  %69 = lshr i64 %.op103, %32
  %70 = select i1 %shft.chk, i64 %69, i64 0
  %71 = xor i64 %70, %41
  %72 = and i64 %71, 4294967295
  %73 = xor i64 %72, 2092535298
  %74 = mul nuw i64 %73, 3449720151
  %75 = xor i64 %68, %74
  %76 = and i64 %75, 4294967295
  %77 = xor i64 %76, 1233932327
  %78 = mul nuw i64 %77, 3528531795
  %79 = lshr i64 %78, %32
  %80 = lshr i64 %74, %32
  %81 = xor i64 %80, %.op101
  %.op104 = and i64 %81, 4294967295
  %82 = xor i64 %.op104, 2874463854
  %.op105 = mul nuw i64 %82, 3528531795
  %83 = xor i64 %79, %.op105
  %.op106 = and i64 %83, 4294967295
  %.op106.op = xor i64 %.op106, 2935003537
  %.op106.op.op = mul nuw i64 %.op106.op, 3449720151
  %84 = lshr i64 %.op106.op.op, %32
  %85 = select i1 %shft.chk, i64 %84, i64 0
  %86 = lshr i64 %.op105, %32
  %87 = select i1 %shft.chk, i64 %86, i64 0
  %88 = xor i64 %87, %61
  %89 = and i64 %88, 4294967295
  %90 = xor i64 %89, 4085836556
  %91 = mul nuw i64 %90, 3449720151
  %92 = xor i64 %85, %91
  %93 = and i64 %92, 4294967295
  %94 = xor i64 %93, 2247836569
  %95 = mul nuw i64 %94, 3528531795
  %96 = lshr i64 %95, %32
  %97 = lshr i64 %91, %32
  %98 = xor i64 %97, %.op.op.op
  %.op107 = and i64 %98, 4294967295
  %.op107.op = xor i64 %.op107, 3888368096
  %.op107.op.op = mul nuw i64 %.op107.op, 3528531795
  %99 = xor i64 %96, %.op107.op.op
  %.op129 = and i64 %99, 4294967295
  %.op129.op = xor i64 %.op129, 633337499
  %.op129.op.op = mul nuw i64 %.op129.op, 3449720151
  %100 = lshr i64 %.op129.op.op, %32
  %101 = select i1 %shft.chk, i64 %100, i64 0
  %102 = lshr i64 %.op107.op.op, %32
  %103 = select i1 %shft.chk, i64 %102, i64 0
  %104 = xor i64 %103, %78
  %105 = and i64 %104, 4294967295
  %106 = xor i64 %105, 1784170518
  %107 = mul nuw i64 %106, 3449720151
  %108 = xor i64 %101, %107
  %109 = and i64 %108, 4294967295
  %110 = xor i64 %109, 3261740811
  %111 = mul nuw i64 %110, 3528531795
  %112 = lshr i64 %111, %32
  %113 = lshr i64 %107, %32
  %114 = xor i64 %113, %.op106.op.op
  %.op108 = and i64 %114, 4294967295
  %.op108.op = xor i64 %.op108, 607305042
  %.op108.op.op = mul nuw i64 %.op108.op, 3528531795
  %115 = xor i64 %112, %.op108.op.op
  %.op130 = and i64 %115, 4294967295
  %.op130.op = xor i64 %.op130, 2626638757
  %.op130.op.op = mul nuw i64 %.op130.op, 3449720151
  %116 = select i1 %shft.chk, i64 %.op130.op.op, i64 2363811629173534323
  %117 = lshr i64 %116, %32
  %118 = trunc i64 %117 to i32
  %119 = select i1 %shft.chk, i32 %118, i32 0
  %120 = lshr i64 %.op108.op.op, %32
  %121 = select i1 %shft.chk, i64 %120, i64 0
  %122 = xor i64 %121, %95
  %123 = trunc i64 %122 to i32
  %124 = xor i32 %123, -517495520
  %125 = mul i32 %124, -845247145
  %126 = xor i32 %119, %125
  %127 = lshr i32 %126, 9
  %phi.bo = xor i32 %127, 8350869
  %phi.cast = uitofp i32 %phi.bo to float
  %multiply.279 = fmul float %4, 0x3FE6A09E60000000
  %128 = fcmp ole float %multiply.279, -4.000000e+00
  %129 = select i1 %128, float -4.000000e+00, float %multiply.279
  %130 = fcmp oge float %129, 4.000000e+00
  %131 = select i1 %130, float 4.000000e+00, float %129
  %multiply.282 = fmul float %131, %131
  %multiply.284 = fmul float %multiply.282, 0.000000e+00
  %add.286 = fadd float %multiply.284, 0xBDF2BBE160000000
  %multiply.287 = fmul float %multiply.282, %add.286
  %add.289 = fadd float %multiply.287, 0x3E5DBFFDC0000000
  %multiply.290 = fmul float %multiply.282, %add.289
  %add.292 = fadd float %multiply.290, 0xBEC19FEA20000000
  %multiply.293 = fmul float %multiply.282, %add.292
  %add.295 = fadd float %multiply.293, 0xBF0DD85A40000000
  %multiply.296 = fmul float %multiply.282, %add.295
  %add.298 = fadd float %multiply.296, 0xBF48158C60000000
  %multiply.299 = fmul float %multiply.282, %add.298
  %add.301 = fadd float %multiply.299, 0xBF68343EC0000000
  %multiply.302 = fmul float %multiply.282, %add.301
  %add.304 = fadd float %multiply.302, 0xBF907B7A80000000
  %multiply.305 = fmul float %131, %add.304
  %add.307 = fadd float %multiply.284, 0xBEEE8C19A0000000
  %multiply.308 = fmul float %multiply.282, %add.307
  %add.310 = fadd float %multiply.308, 0xBF2BF7A520000000
  %multiply.311 = fmul float %multiply.282, %add.310
  %add.313 = fadd float %multiply.311, 0xBF5B9249C0000000
  %multiply.314 = fmul float %multiply.282, %add.313
  %add.316 = fadd float %multiply.314, 0xBF7E337F00000000
  %multiply.317 = fmul float %multiply.282, %add.316
  %add.319 = fadd float %multiply.317, 0xBF8D36D4E0000000
  %divide.320 = fdiv float %multiply.305, %add.319
  %multiply.321 = fmul float %15, 0x3FE6A09E60000000
  %132 = fcmp ole float %multiply.321, -4.000000e+00
  %133 = select i1 %132, float -4.000000e+00, float %multiply.321
  %134 = fcmp oge float %133, 4.000000e+00
  %135 = select i1 %134, float 4.000000e+00, float %133
  %multiply.323 = fmul float %135, %135
  %multiply.324 = fmul float %multiply.323, 0.000000e+00
  %add.325 = fadd float %multiply.324, 0xBDF2BBE160000000
  %multiply.326 = fmul float %multiply.323, %add.325
  %add.327 = fadd float %multiply.326, 0x3E5DBFFDC0000000
  %multiply.328 = fmul float %multiply.323, %add.327
  %add.329 = fadd float %multiply.328, 0xBEC19FEA20000000
  %multiply.330 = fmul float %multiply.323, %add.329
  %add.331 = fadd float %multiply.330, 0xBF0DD85A40000000
  %multiply.332 = fmul float %multiply.323, %add.331
  %add.333 = fadd float %multiply.332, 0xBF48158C60000000
  %multiply.334 = fmul float %multiply.323, %add.333
  %add.335 = fadd float %multiply.334, 0xBF68343EC0000000
  %multiply.336 = fmul float %multiply.323, %add.335
  %add.337 = fadd float %multiply.336, 0xBF907B7A80000000
  %multiply.338 = fmul float %135, %add.337
  %add.339 = fadd float %multiply.324, 0xBEEE8C19A0000000
  %multiply.340 = fmul float %multiply.323, %add.339
  %add.341 = fadd float %multiply.340, 0xBF2BF7A520000000
  %multiply.342 = fmul float %multiply.323, %add.341
  %add.343 = fadd float %multiply.342, 0xBF5B9249C0000000
  %multiply.344 = fmul float %multiply.323, %add.343
  %add.345 = fadd float %multiply.344, 0xBF7E337F00000000
  %multiply.346 = fmul float %multiply.323, %add.345
  %add.347 = fadd float %multiply.346, 0xBF8D36D4E0000000
  %divide.348 = fdiv float %multiply.338, %add.347
  %subtract.349 = fsub float %divide.320, %divide.348
  %multiply.351 = fmul float %subtract.349, 0x3E80000000000000
  %multiply.353 = fmul float %multiply.351, %phi.cast
  %add.355 = fadd float %divide.348, %multiply.353
  %136 = tail call float @llvm.fabs.f32(float %add.355)
  %compare.360 = fcmp oeq float %136, 1.000000e+00
  %137 = fneg float %add.355
  %multiply.364 = fmul float %add.355, %137
  %138 = tail call float @llvm.nvvm.add.rz.f(float %multiply.364, float 1.000000e+00) #5
  %139 = bitcast float %138 to i32
  %140 = add nsw i32 %139, -1061158912
  %141 = and i32 %140, -8388608
  %142 = bitcast float %multiply.364 to i32
  %143 = sub nsw i32 %142, %141
  %144 = bitcast i32 %143 to float
  %145 = sub nsw i32 1082130432, %141
  %146 = bitcast i32 %145 to float
  %147 = tail call float @llvm.fma.f32(float %146, float 2.500000e-01, float -1.000000e+00) #5
  %148 = fadd float %147, %144
  %149 = sitofp i32 %141 to float
  %150 = fmul float %149, 0x3E80000000000000
  %151 = tail call float @llvm.fma.f32(float %148, float 0xBFA737EF00000000, float 0x3FBB000240000000) #5
  %152 = tail call float @llvm.fma.f32(float %151, float %148, float 0xBFC0EF1C00000000) #5
  %153 = tail call float @llvm.fma.f32(float %152, float %148, float 0x3FC28C8EA0000000) #5
  %154 = tail call float @llvm.fma.f32(float %153, float %148, float 0xBFC54D1BA0000000) #5
  %155 = tail call float @llvm.fma.f32(float %154, float %148, float 0x3FC995F3C0000000) #5
  %156 = tail call float @llvm.fma.f32(float %155, float %148, float 0xBFD0000840000000) #5
  %157 = tail call float @llvm.fma.f32(float %156, float %148, float 0x3FD5555CC0000000) #5
  %158 = tail call float @llvm.fma.f32(float %157, float %148, float -5.000000e-01) #5
  %159 = fmul float %148, %158
  %160 = tail call float @llvm.fma.f32(float %159, float %148, float %148) #5
  %161 = tail call float @llvm.fma.f32(float %150, float 0x3FE62E4300000000, float %160) #5
  %162 = icmp ugt i32 %142, 2139095039
  %163 = icmp sgt i32 %142, -1082130432
  %164 = tail call float @llvm.fma.f32(float %multiply.364, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i = select i1 %163, float %164, float %161
  %165 = fcmp oeq float %multiply.364, 0.000000e+00
  %r.1.i = select i1 %165, float -0.000000e+00, float %spec.select.i
  %spec.select1.i = select i1 %162, float %r.1.i, float %161
  %166 = fneg float %spec.select1.i
  %compare.369 = fcmp ogt float %spec.select1.i, -5.000000e+00
  %167 = select i1 %compare.369, float 0x3FF805C5E0000000, float 0x4006A9EFC0000000
  %168 = select i1 %compare.369, float 0x3FCF91EC60000000, float 0x3FF006DB60000000
  %169 = select i1 %compare.369, float 0xBF711C9DE0000000, float 0x3F8354AFC0000000
  %170 = select i1 %compare.369, float 0xBF548A8100000000, float 0xBF7F38BAE0000000
  %171 = select i1 %compare.369, float 0x3F2CA65B60000000, float 0x3F77824F60000000
  %172 = select i1 %compare.369, float 0xBED26B5820000000, float 0xBF6E17BCE0000000
  %173 = select i1 %compare.369, float 0xBECD8E6AE0000000, float 0x3F561B8E40000000
  %174 = select i1 %compare.369, float 0x3E970966C0000000, float 0x3F1A76AD60000000
  %175 = select i1 %compare.369, float 0x3E5E2CB100000000, float 0xBF2A3E1360000000
  %add.417 = fsub float -2.500000e+00, %spec.select1.i
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #5
  %add.421 = fadd float %176, -3.000000e+00
  %177 = select i1 %compare.369, float %add.417, float %add.421
  %multiply.423 = fmul float %175, %177
  %add.424 = fadd float %174, %multiply.423
  %multiply.425 = fmul float %177, %add.424
  %add.426 = fadd float %173, %multiply.425
  %multiply.427 = fmul float %177, %add.426
  %add.428 = fadd float %172, %multiply.427
  %multiply.429 = fmul float %177, %add.428
  %add.430 = fadd float %171, %multiply.429
  %multiply.431 = fmul float %177, %add.430
  %add.432 = fadd float %170, %multiply.431
  %multiply.433 = fmul float %177, %add.432
  %add.434 = fadd float %169, %multiply.433
  %multiply.435 = fmul float %177, %add.434
  %add.436 = fadd float %168, %multiply.435
  %multiply.437 = fmul float %177, %add.436
  %add.438 = fadd float %167, %multiply.437
  %.v = select i1 %compare.360, float 0x7FF0000000000000, float %add.438
  %178 = fmul float %add.355, %.v
  %multiply.443 = fmul float %178, 0x3FF6A09E60000000
  %179 = fcmp ole float %multiply.443, %25
  %180 = fcmp uno float %25, 0.000000e+00
  %181 = or i1 %180, %179
  %maximum.444 = select i1 %181, float %25, float %multiply.443
  %182 = fcmp oge float %maximum.444, %13
  %183 = fcmp uno float %13, 0.000000e+00
  %184 = or i1 %183, %182
  %minimum.445 = select i1 %184, float %13, float %maximum.444
  %185 = bitcast i8 addrspace(1)* %alloc2148 to float addrspace(1)*
  %186 = zext i32 %linear_index_base to i64
  %187 = getelementptr float, float addrspace(1)* %185, i64 %186
  %.op112 = xor i64 %114, 607305042
  %.op112.op = mul i64 %.op112, 3528531795
  %188 = xor i64 %112, %.op112.op
  %189 = trunc i64 %188 to i32
  %.op113 = xor i32 %189, -1668328539
  %.op113.op = mul i32 %.op113, -845247145
  %.op113.op.op = lshr i32 %.op113.op, 9
  %190 = uitofp i32 %.op113.op.op to float
  %phi.cast115 = select i1 %shft.chk, float %190, float 8.134950e+05
  %multiply.353483 = fmul float %multiply.351, %phi.cast115
  %add.355484 = fadd float %divide.348, %multiply.353483
  %191 = tail call float @llvm.fabs.f32(float %add.355484)
  %compare.360486 = fcmp oeq float %191, 1.000000e+00
  %192 = fneg float %add.355484
  %multiply.364489 = fmul float %add.355484, %192
  %193 = tail call float @llvm.nvvm.add.rz.f(float %multiply.364489, float 1.000000e+00) #5
  %194 = bitcast float %193 to i32
  %195 = add nsw i32 %194, -1061158912
  %196 = and i32 %195, -8388608
  %197 = bitcast float %multiply.364489 to i32
  %198 = sub nsw i32 %197, %196
  %199 = bitcast i32 %198 to float
  %200 = sub nsw i32 1082130432, %196
  %201 = bitcast i32 %200 to float
  %202 = tail call float @llvm.fma.f32(float %201, float 2.500000e-01, float -1.000000e+00) #5
  %203 = fadd float %202, %199
  %204 = sitofp i32 %196 to float
  %205 = fmul float %204, 0x3E80000000000000
  %206 = tail call float @llvm.fma.f32(float %203, float 0xBFA737EF00000000, float 0x3FBB000240000000) #5
  %207 = tail call float @llvm.fma.f32(float %206, float %203, float 0xBFC0EF1C00000000) #5
  %208 = tail call float @llvm.fma.f32(float %207, float %203, float 0x3FC28C8EA0000000) #5
  %209 = tail call float @llvm.fma.f32(float %208, float %203, float 0xBFC54D1BA0000000) #5
  %210 = tail call float @llvm.fma.f32(float %209, float %203, float 0x3FC995F3C0000000) #5
  %211 = tail call float @llvm.fma.f32(float %210, float %203, float 0xBFD0000840000000) #5
  %212 = tail call float @llvm.fma.f32(float %211, float %203, float 0x3FD5555CC0000000) #5
  %213 = tail call float @llvm.fma.f32(float %212, float %203, float -5.000000e-01) #5
  %214 = fmul float %203, %213
  %215 = tail call float @llvm.fma.f32(float %214, float %203, float %203) #5
  %216 = tail call float @llvm.fma.f32(float %205, float 0x3FE62E4300000000, float %215) #5
  %217 = icmp ugt i32 %197, 2139095039
  %218 = icmp sgt i32 %197, -1082130432
  %219 = tail call float @llvm.fma.f32(float %multiply.364489, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i141 = select i1 %218, float %219, float %216
  %220 = fcmp oeq float %multiply.364489, 0.000000e+00
  %r.1.i142 = select i1 %220, float -0.000000e+00, float %spec.select.i141
  %spec.select1.i143 = select i1 %217, float %r.1.i142, float %216
  %221 = fneg float %spec.select1.i143
  %compare.369491 = fcmp ogt float %spec.select1.i143, -5.000000e+00
  %222 = select i1 %compare.369491, float 0x3FF805C5E0000000, float 0x4006A9EFC0000000
  %223 = select i1 %compare.369491, float 0x3FCF91EC60000000, float 0x3FF006DB60000000
  %224 = select i1 %compare.369491, float 0xBF711C9DE0000000, float 0x3F8354AFC0000000
  %225 = select i1 %compare.369491, float 0xBF548A8100000000, float 0xBF7F38BAE0000000
  %226 = select i1 %compare.369491, float 0x3F2CA65B60000000, float 0x3F77824F60000000
  %227 = select i1 %compare.369491, float 0xBED26B5820000000, float 0xBF6E17BCE0000000
  %228 = select i1 %compare.369491, float 0xBECD8E6AE0000000, float 0x3F561B8E40000000
  %229 = select i1 %compare.369491, float 0x3E970966C0000000, float 0x3F1A76AD60000000
  %230 = select i1 %compare.369491, float 0x3E5E2CB100000000, float 0xBF2A3E1360000000
  %add.417511 = fsub float -2.500000e+00, %spec.select1.i143
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #5
  %add.421513 = fadd float %231, -3.000000e+00
  %232 = select i1 %compare.369491, float %add.417511, float %add.421513
  %multiply.423514 = fmul float %230, %232
  %add.424515 = fadd float %229, %multiply.423514
  %multiply.425516 = fmul float %232, %add.424515
  %add.426517 = fadd float %228, %multiply.425516
  %multiply.427518 = fmul float %232, %add.426517
  %add.428519 = fadd float %227, %multiply.427518
  %multiply.429520 = fmul float %232, %add.428519
  %add.430521 = fadd float %226, %multiply.429520
  %multiply.431522 = fmul float %232, %add.430521
  %add.432523 = fadd float %225, %multiply.431522
  %multiply.433524 = fmul float %232, %add.432523
  %add.434525 = fadd float %224, %multiply.433524
  %multiply.435526 = fmul float %232, %add.434525
  %add.436527 = fadd float %223, %multiply.435526
  %multiply.437528 = fmul float %232, %add.436527
  %add.438529 = fadd float %222, %multiply.437528
  %.v19 = select i1 %compare.360486, float 0x7FF0000000000000, float %add.438529
  %233 = fmul float %add.355484, %.v19
  %multiply.443532 = fmul float %233, 0x3FF6A09E60000000
  %234 = fcmp ole float %multiply.443532, %25
  %235 = or i1 %180, %234
  %maximum.444533 = select i1 %235, float %25, float %multiply.443532
  %236 = fcmp oge float %maximum.444533, %13
  %237 = or i1 %183, %236
  %minimum.445534 = select i1 %237, float %13, float %maximum.444533
  %238 = and i64 %122, 4294967295
  %239 = xor i64 %238, 3777471776
  %240 = mul nuw i64 %239, 3449720151
  %241 = lshr i64 %240, %32
  %242 = xor i64 %241, %.op129.op.op
  %.op133 = and i64 %242, 4294967295
  %.op133.op = xor i64 %.op133, 1621209284
  %.op133.op.op = mul nuw i64 %.op133.op, 3528531795
  %243 = select i1 %shft.chk, i64 %.op133.op.op, i64 2341359276778309560
  %244 = lshr i64 %243, %32
  %245 = trunc i64 %244 to i32
  %246 = select i1 %shft.chk, i32 %245, i32 0
  %247 = trunc i64 %108 to i32
  %248 = xor i32 %247, -1033226485
  %249 = mul i32 %248, -766435501
  %250 = xor i32 %246, %249
  %251 = lshr i32 %250, 9
  %phi.bo120 = xor i32 %251, 2882433
  %phi.cast121 = uitofp i32 %phi.bo120 to float
  %multiply.353836 = fmul float %multiply.351, %phi.cast121
  %add.355837 = fadd float %divide.348, %multiply.353836
  %252 = tail call float @llvm.fabs.f32(float %add.355837)
  %compare.360839 = fcmp oeq float %252, 1.000000e+00
  %253 = fneg float %add.355837
  %multiply.364842 = fmul float %add.355837, %253
  %254 = tail call float @llvm.nvvm.add.rz.f(float %multiply.364842, float 1.000000e+00) #5
  %255 = bitcast float %254 to i32
  %256 = add nsw i32 %255, -1061158912
  %257 = and i32 %256, -8388608
  %258 = bitcast float %multiply.364842 to i32
  %259 = sub nsw i32 %258, %257
  %260 = bitcast i32 %259 to float
  %261 = sub nsw i32 1082130432, %257
  %262 = bitcast i32 %261 to float
  %263 = tail call float @llvm.fma.f32(float %262, float 2.500000e-01, float -1.000000e+00) #5
  %264 = fadd float %263, %260
  %265 = sitofp i32 %257 to float
  %266 = fmul float %265, 0x3E80000000000000
  %267 = tail call float @llvm.fma.f32(float %264, float 0xBFA737EF00000000, float 0x3FBB000240000000) #5
  %268 = tail call float @llvm.fma.f32(float %267, float %264, float 0xBFC0EF1C00000000) #5
  %269 = tail call float @llvm.fma.f32(float %268, float %264, float 0x3FC28C8EA0000000) #5
  %270 = tail call float @llvm.fma.f32(float %269, float %264, float 0xBFC54D1BA0000000) #5
  %271 = tail call float @llvm.fma.f32(float %270, float %264, float 0x3FC995F3C0000000) #5
  %272 = tail call float @llvm.fma.f32(float %271, float %264, float 0xBFD0000840000000) #5
  %273 = tail call float @llvm.fma.f32(float %272, float %264, float 0x3FD5555CC0000000) #5
  %274 = tail call float @llvm.fma.f32(float %273, float %264, float -5.000000e-01) #5
  %275 = fmul float %264, %274
  %276 = tail call float @llvm.fma.f32(float %275, float %264, float %264) #5
  %277 = tail call float @llvm.fma.f32(float %266, float 0x3FE62E4300000000, float %276) #5
  %278 = icmp ugt i32 %258, 2139095039
  %279 = icmp sgt i32 %258, -1082130432
  %280 = tail call float @llvm.fma.f32(float %multiply.364842, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i138 = select i1 %279, float %280, float %277
  %281 = fcmp oeq float %multiply.364842, 0.000000e+00
  %r.1.i139 = select i1 %281, float -0.000000e+00, float %spec.select.i138
  %spec.select1.i140 = select i1 %278, float %r.1.i139, float %277
  %282 = fneg float %spec.select1.i140
  %compare.369844 = fcmp ogt float %spec.select1.i140, -5.000000e+00
  %283 = select i1 %compare.369844, float 0x3FF805C5E0000000, float 0x4006A9EFC0000000
  %284 = select i1 %compare.369844, float 0x3FCF91EC60000000, float 0x3FF006DB60000000
  %285 = select i1 %compare.369844, float 0xBF711C9DE0000000, float 0x3F8354AFC0000000
  %286 = select i1 %compare.369844, float 0xBF548A8100000000, float 0xBF7F38BAE0000000
  %287 = select i1 %compare.369844, float 0x3F2CA65B60000000, float 0x3F77824F60000000
  %288 = select i1 %compare.369844, float 0xBED26B5820000000, float 0xBF6E17BCE0000000
  %289 = select i1 %compare.369844, float 0xBECD8E6AE0000000, float 0x3F561B8E40000000
  %290 = select i1 %compare.369844, float 0x3E970966C0000000, float 0x3F1A76AD60000000
  %291 = select i1 %compare.369844, float 0x3E5E2CB100000000, float 0xBF2A3E1360000000
  %add.417864 = fsub float -2.500000e+00, %spec.select1.i140
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %282) #5
  %add.421866 = fadd float %292, -3.000000e+00
  %293 = select i1 %compare.369844, float %add.417864, float %add.421866
  %multiply.423867 = fmul float %291, %293
  %add.424868 = fadd float %290, %multiply.423867
  %multiply.425869 = fmul float %293, %add.424868
  %add.426870 = fadd float %289, %multiply.425869
  %multiply.427871 = fmul float %293, %add.426870
  %add.428872 = fadd float %288, %multiply.427871
  %multiply.429873 = fmul float %293, %add.428872
  %add.430874 = fadd float %287, %multiply.429873
  %multiply.431875 = fmul float %293, %add.430874
  %add.432876 = fadd float %286, %multiply.431875
  %multiply.433877 = fmul float %293, %add.432876
  %add.434878 = fadd float %285, %multiply.433877
  %multiply.435879 = fmul float %293, %add.434878
  %add.436880 = fadd float %284, %multiply.435879
  %multiply.437881 = fmul float %293, %add.436880
  %add.438882 = fadd float %283, %multiply.437881
  %.v26 = select i1 %compare.360839, float 0x7FF0000000000000, float %add.438882
  %294 = fmul float %add.355837, %.v26
  %multiply.443885 = fmul float %294, 0x3FF6A09E60000000
  %295 = fcmp ole float %multiply.443885, %25
  %296 = or i1 %180, %295
  %maximum.444886 = select i1 %296, float %25, float %multiply.443885
  %297 = fcmp oge float %maximum.444886, %13
  %298 = or i1 %183, %297
  %minimum.445887 = select i1 %298, float %13, float %maximum.444886
  %.op125 = xor i64 %99, 633337499
  %.op125.op = mul i64 %.op125, 3449720151
  %299 = xor i64 %241, %.op125.op
  %300 = trunc i64 %299 to i32
  %.op126 = xor i32 %300, 1621209284
  %.op126.op = mul i32 %.op126, -766435501
  %.op126.op.op = lshr i32 %.op126.op, 9
  %301 = uitofp i32 %.op126.op.op to float
  %phi.cast128 = select i1 %shft.chk, float %301, float 0x414BFBF180000000
  %multiply.3531189 = fmul float %multiply.351, %phi.cast128
  %add.3551190 = fadd float %divide.348, %multiply.3531189
  %302 = tail call float @llvm.fabs.f32(float %add.3551190)
  %compare.3601192 = fcmp oeq float %302, 1.000000e+00
  %303 = fneg float %add.3551190
  %multiply.3641195 = fmul float %add.3551190, %303
  %304 = tail call float @llvm.nvvm.add.rz.f(float %multiply.3641195, float 1.000000e+00) #5
  %305 = bitcast float %304 to i32
  %306 = add nsw i32 %305, -1061158912
  %307 = and i32 %306, -8388608
  %308 = bitcast float %multiply.3641195 to i32
  %309 = sub nsw i32 %308, %307
  %310 = bitcast i32 %309 to float
  %311 = sub nsw i32 1082130432, %307
  %312 = bitcast i32 %311 to float
  %313 = tail call float @llvm.fma.f32(float %312, float 2.500000e-01, float -1.000000e+00) #5
  %314 = fadd float %313, %310
  %315 = sitofp i32 %307 to float
  %316 = fmul float %315, 0x3E80000000000000
  %317 = tail call float @llvm.fma.f32(float %314, float 0xBFA737EF00000000, float 0x3FBB000240000000) #5
  %318 = tail call float @llvm.fma.f32(float %317, float %314, float 0xBFC0EF1C00000000) #5
  %319 = tail call float @llvm.fma.f32(float %318, float %314, float 0x3FC28C8EA0000000) #5
  %320 = tail call float @llvm.fma.f32(float %319, float %314, float 0xBFC54D1BA0000000) #5
  %321 = tail call float @llvm.fma.f32(float %320, float %314, float 0x3FC995F3C0000000) #5
  %322 = tail call float @llvm.fma.f32(float %321, float %314, float 0xBFD0000840000000) #5
  %323 = tail call float @llvm.fma.f32(float %322, float %314, float 0x3FD5555CC0000000) #5
  %324 = tail call float @llvm.fma.f32(float %323, float %314, float -5.000000e-01) #5
  %325 = fmul float %314, %324
  %326 = tail call float @llvm.fma.f32(float %325, float %314, float %314) #5
  %327 = tail call float @llvm.fma.f32(float %316, float 0x3FE62E4300000000, float %326) #5
  %328 = icmp ugt i32 %308, 2139095039
  %329 = icmp sgt i32 %308, -1082130432
  %330 = tail call float @llvm.fma.f32(float %multiply.3641195, float 0x7FF0000000000000, float 0x7FF0000000000000) #5
  %spec.select.i135 = select i1 %329, float %330, float %327
  %331 = fcmp oeq float %multiply.3641195, 0.000000e+00
  %r.1.i136 = select i1 %331, float -0.000000e+00, float %spec.select.i135
  %spec.select1.i137 = select i1 %328, float %r.1.i136, float %327
  %332 = fneg float %spec.select1.i137
  %compare.3691197 = fcmp ogt float %spec.select1.i137, -5.000000e+00
  %333 = select i1 %compare.3691197, float 0x3FF805C5E0000000, float 0x4006A9EFC0000000
  %334 = select i1 %compare.3691197, float 0x3FCF91EC60000000, float 0x3FF006DB60000000
  %335 = select i1 %compare.3691197, float 0xBF711C9DE0000000, float 0x3F8354AFC0000000
  %336 = select i1 %compare.3691197, float 0xBF548A8100000000, float 0xBF7F38BAE0000000
  %337 = select i1 %compare.3691197, float 0x3F2CA65B60000000, float 0x3F77824F60000000
  %338 = select i1 %compare.3691197, float 0xBED26B5820000000, float 0xBF6E17BCE0000000
  %339 = select i1 %compare.3691197, float 0xBECD8E6AE0000000, float 0x3F561B8E40000000
  %340 = select i1 %compare.3691197, float 0x3E970966C0000000, float 0x3F1A76AD60000000
  %341 = select i1 %compare.3691197, float 0x3E5E2CB100000000, float 0xBF2A3E1360000000
  %add.4171217 = fsub float -2.500000e+00, %spec.select1.i137
  %342 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #5
  %add.4211219 = fadd float %342, -3.000000e+00
  %343 = select i1 %compare.3691197, float %add.4171217, float %add.4211219
  %multiply.4231220 = fmul float %341, %343
  %add.4241221 = fadd float %340, %multiply.4231220
  %multiply.4251222 = fmul float %343, %add.4241221
  %add.4261223 = fadd float %339, %multiply.4251222
  %multiply.4271224 = fmul float %343, %add.4261223
  %add.4281225 = fadd float %338, %multiply.4271224
  %multiply.4291226 = fmul float %343, %add.4281225
  %add.4301227 = fadd float %337, %multiply.4291226
  %multiply.4311228 = fmul float %343, %add.4301227
  %add.4321229 = fadd float %336, %multiply.4311228
  %multiply.4331230 = fmul float %343, %add.4321229
  %add.4341231 = fadd float %335, %multiply.4331230
  %multiply.4351232 = fmul float %343, %add.4341231
  %add.4361233 = fadd float %334, %multiply.4351232
  %multiply.4371234 = fmul float %343, %add.4361233
  %add.4381235 = fadd float %333, %multiply.4371234
  %.v33 = select i1 %compare.3601192, float 0x7FF0000000000000, float %add.4381235
  %344 = fmul float %add.3551190, %.v33
  %multiply.4431238 = fmul float %344, 0x3FF6A09E60000000
  %345 = fcmp ole float %multiply.4431238, %25
  %346 = or i1 %180, %345
  %maximum.4441239 = select i1 %346, float %25, float %multiply.4431238
  %347 = fcmp oge float %maximum.4441239, %13
  %348 = or i1 %183, %347
  %minimum.4451240 = select i1 %348, float %13, float %maximum.4441239
  %349 = insertelement <4 x float> poison, float %minimum.445, i32 0
  %350 = insertelement <4 x float> %349, float %minimum.445534, i32 1
  %351 = insertelement <4 x float> %350, float %minimum.445887, i32 2
  %352 = insertelement <4 x float> %351, float %minimum.4451240, i32 3
  %353 = bitcast float addrspace(1)* %187 to <4 x float> addrspace(1)*
  store <4 x float> %352, <4 x float> addrspace(1)* %353, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone willreturn
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.nvvm.add.rz.f(float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #4

attributes #0 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { mustprogress nocallback nofree nosync nounwind readnone willreturn }
attributes #4 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { nounwind }

!nvvm.annotations = !{!0, !1, !2, !3}
!llvm.ident = !{!4}
!llvm.module.flags = !{!5}

!0 = distinct !{null, !"kernel", i32 1}
!1 = distinct !{null, !"reqntidx", i32 1}
!2 = !{void (i8*, i8*, i8*, i8*)* @fusion, !"kernel", i32 1}
!3 = !{void (i8*, i8*, i8*, i8*)* @fusion, !"reqntidx", i32 64}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !{i32 4, !"nvvm-reflect-ftz", i32 0}
!6 = !{i32 0, i32 64}
!7 = !{}
